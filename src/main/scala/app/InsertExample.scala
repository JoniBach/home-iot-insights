package app

import cats.effect.{IO, IOApp}
import cats.implicits._
import doobie.implicits._
import doobie.postgres.implicits._
import infrastructure.db.config.DatabaseConfig
import core.entities.Insight
import java.util.UUID
import java.time.Instant

object InsertExample extends IOApp.Simple {
  
  override def run: IO[Unit] = {
    // Create a new insight to insert
    val newInsight = Insight(
      id = None,  // Will be generated by the database
      macAddress = "b'T2\\x04\\x1do\\xa4'",
      sensor = "m5_env_4",
      value = 23.5,  // Example temperature value
      buildingId = Some(UUID.fromString("c1291ca4-e859-44b9-b738-984babb9fd2d")),
      roomId = Some(UUID.fromString("ccdd7e22-c327-4fe7-8d8b-a7d66aaeea1a")),
      insightTypeId = Some(UUID.fromString("c160c68c-0b82-4e1a-8bd8-6aab738c0266")),
      rangeFrom = Some(Instant.parse("2025-08-06T00:00:00Z")),
      rangeTo = Some(Instant.parse("2025-08-07T00:00:00Z")),
      createdAt = Instant.now()
    )

    // SQL query to insert the insight
    val insertQuery = 
      sql"""
        INSERT INTO insights (
          mac_address, sensor_id, value, 
          building_id, room_id, insight_type_id, 
          range_from, range_to, created_at
        )
        VALUES (
          ${newInsight.macAddress}, ${newInsight.sensor}, ${newInsight.value}, 
          ${newInsight.buildingId}, ${newInsight.roomId}, ${newInsight.insightTypeId},
          ${newInsight.rangeFrom}, ${newInsight.rangeTo}, ${newInsight.createdAt}
        )
        RETURNING 
          id, mac_address, sensor_id as sensor, value, 
          building_id, room_id, insight_type_id, 
          range_from, range_to, created_at
      """.query[Insight]

    // Execute the query and handle the result
    val result = for {
      _ <- IO.println("Attempting to insert new insight...")
      inserted <- insertQuery.unique.transact(DatabaseConfig.transactor)
      _ <- IO.println(s"Successfully inserted insight with ID: ${inserted.id.getOrElse("unknown")}")
      _ <- IO.println(s"Inserted insight details: $inserted")
    } yield ()

    // Handle any errors
    result.handleErrorWith { error =>
      IO.println(s"Failed to insert insight: ${error.getMessage}")
    }
  }
}